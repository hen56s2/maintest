-- Global Variables
if not getgenv().WebHookUrl then
    getgenv().WebHookUrl = ""
end

-- Services
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Constants (kept the same for compatibility)
local RARITY_COLORS = {
    [Color3.fromRGB(152, 152, 152)] = "Common",
    [Color3.fromRGB(91, 194, 80)] = "Uncommon",
    [Color3.fromRGB(75, 77, 195)] = "Rare",
    [Color3.fromRGB(146, 70, 159)] = "Epic",
    [Color3.fromRGB(244, 154, 9)] = "Legendary"
}

-- Keep ULTIMATE_WEAPONS and LEGENDARY_WEAPONS tables the same

-- Optimized Helper Functions
local function getRainbowColor()
    local frequency = 2 * math.pi / 6
    local timestamp = tick()
    return bit32.lshift(math.floor(math.sin(frequency * timestamp + 0) * 127 + 128), 16) + 
           bit32.lshift(math.floor(math.sin(frequency * timestamp + 2) * 127 + 128), 8) + 
           math.floor(math.sin(frequency * timestamp + 4) * 127 + 128)
end

local function getClosestColor(color)
    local minDistance = math.huge
    local closestRarity = "Unknown"
    for rarityColor, rarity in pairs(RARITY_COLORS) do
        local dr, dg, db = color.R - rarityColor.R, color.G - rarityColor.G, color.B - rarityColor.B
        local distance = dr * dr + dg * dg + db * db
        if distance < minDistance then
            minDistance = distance
            closestRarity = rarity
        end
    end
    return closestRarity
end

-- Optimized WebHook Function
local function SendDiscordEmbed(playerName, items, isGreggBoss)
    if not (getgenv().WebHookLoots and getgenv().WebHookUrl and getgenv().WebHookUrl ~= "") then return end

    local lootList = table.concat(table.create(#items, ""), function(_, item)
        return "Loot Got: " .. item.name .. " [" .. item.rarity .. "]\n"
    end)
    
    local hasSpecialDrop = false
    for _, item in ipairs(items) do
        if ULTIMATE_WEAPONS[item.name] or LEGENDARY_WEAPONS[item.name] then
            hasSpecialDrop = true
            break
        end
    end

    local data = {
        ["embeds"] = {{
            ["title"] = "NSHUB Loot Notifier",
            ["description"] = lootList,
            ["color"] = hasSpecialDrop and 0xFF8000 or (isGreggBoss and 0xFF8000 or 0x964B00),
            ["footer"] = {
                ["text"] = "Player: " .. playerName .. " â€¢ " .. os.date("%I:%M %p")
            }
        }}
    }

    if hasSpecialDrop then
        task.spawn(function()
            for i = 1, 10 do
                data.embeds[1].color = getRainbowColor()
                pcall(function()
                    request({
                        Url = getgenv().WebHookUrl,
                        Method = "POST",
                        Headers = {["Content-Type"] = "application/json"},
                        Body = HttpService:JSONEncode(data)
                    })
                end)
                task.wait(0.5) -- Reduced wait time
            end
        end)
    else
        pcall(function()
            request({
                Url = getgenv().WebHookUrl,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = HttpService:JSONEncode(data)
            })
        end)
    end
end

-- Optimized Item Listening Function
local function listenForNewItems()
    local player = Players.LocalPlayer
    if not player then return end
    
    local function getInventoryUI()
        local playerGui = player:WaitForChild("PlayerGui", 5)
        if not playerGui then return end
        return playerGui:WaitForChild("InventoryUi", 5)
            :WaitForChild("Main", 5)
            :WaitForChild("Display", 5)
            :WaitForChild("Gear", 5)
            :WaitForChild("ItemScrollingFrame", 5)
    end
    
    local itemScrollingFrame = getInventoryUI()
    if not itemScrollingFrame then return end
    
    local newItems, itemRarities = {}, {}
    local lastCheckTime = 0
    
    local function processNewItems()
        if tick() - lastCheckTime < 0.25 then return end -- Reduced debounce time
        lastCheckTime = tick()
        
        if #newItems > 0 then
            local dungeonProgress = workspace:FindFirstChild("dungeonProgress")
            local formattedItems = {}
            for i, itemName in ipairs(newItems) do
                table.insert(formattedItems, {
                    name = itemName,
                    rarity = itemRarities[itemName] or "Unknown"
                })
            end
            
            SendDiscordEmbed(player.Name, formattedItems, dungeonProgress and dungeonProgress.Value == "inProgress")
            table.clear(newItems)
            table.clear(itemRarities)
        end
    end
    
    itemScrollingFrame.ChildAdded:Connect(function(child)
        if child:IsA("TextButton") then
            local imageLabel = child:FindFirstChild("ImageLabel")
            itemRarities[child.Name] = imageLabel and getClosestColor(imageLabel.ImageColor3) or "Unknown"
            table.insert(newItems, child.Name)
            task.delay(0.05, processNewItems) -- Reduced delay
        end
    end)
end

-- Optimized Menu Execution
local function executeAutoMenu()
    if not getgenv().AutoMenu then
        print("Macro Successfully Saved and Loaded")
        return
    end

    task.spawn(function()
        -- Batch remote calls together
        local remotes = {
            asset = ReplicatedStorage.Utility.AssetRequester.Remote,
            data = ReplicatedStorage.dataRemoteEvent,
            config = ReplicatedStorage.remotes.RemoteConfigConnection,
            getData = ReplicatedStorage.remotes.getData,
            reloadInvy = ReplicatedStorage.remotes.reloadInvy,
            framework = ReplicatedStorage.remotes.FrameworkRemote
        }

        -- Execute essential calls first
        remotes.asset:InvokeServer({[1] = "sound", [2] = "Music", [3] = "Lobby"})
        remotes.data:FireServer({[1] = {[1] = "\1"}, [2] = "4"})
        remotes.config:InvokeServer("CharacterAltMultipliers")

        task.wait(0.5) -- Minimal wait for game stability

        -- Batch execute remaining calls
        local function batchExecute()
            remotes.data:FireServer({[1] = {[1] = "\1", [2] = {["\3"] = "select", ["characterIndex"] = 1}}, [2] = "M"})
            remotes.asset:InvokeServer({[1] = {[1] = "ui", [2] = "LeaderboardGui"}})
            remotes.getData:InvokeServer("GetWeapons")
            remotes.reloadInvy:InvokeServer()
            remotes.data:FireServer({[1] = {[1] = {["\3"] = "loaded"}}, [2] = "\26"})
            remotes.config:InvokeServer("DungeonLeaderboards")
            remotes.framework:FireServer("UiLoaded")
        end

        task.spawn(batchExecute)
    end)

    print("Executing The Script...")
    
    -- Load external script immediately
    task.spawn(function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/hen56s2/main2/refs/heads/main/2"))()
    end)
end

-- Main Execution
task.spawn(function()
    if getgenv().WebHookLoots then
        listenForNewItems()
    end
    executeAutoMenu()
end)
